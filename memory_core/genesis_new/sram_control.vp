//;use POSIX;
//;my $backtick = "`";
///////////////////////////////////////////////////////////////////
// CGRA SRAM Controller Generator
// Author: Maxwell Strange (Keyi Zhang + Taeyoung Kong)
//////////////////////////////////////////////////////////////////
`$backtick`define xassert(condition, message) if(condition) begin $display(message); $finish(1); end

//; my $dwidth 	 = parameter(Name=>'bwidth', val=> 64, doc=>'bank interface width')
//; my $wwidth   = parameter(Name=>'dwidth', val=> 16, doc=>'word width');
//; my $ddepth   = parameter(Name=>'ddepth', val=> 128, doc=>'number of words in the memory');
//; my $numwords = int($dwidth/$wwidth);
//; my $bbanks   = parameter(Name=>'bbanks', val=> 2, doc=>'number of banks in memory');
//; my $bank_addr_width = int(ceil(log($bbanks)/log(2)))
//; my $awidth = int(ceil(log($ddepth)/log(2))) + int(ceil(log($numwords)/log(2))) + $bank_addr_width;

module `mname()`(
clk,
clk_en,
reset,
flush,

data_in,
wen,
data_out,
ren,
addr,

sram_to_mem_data,
sram_to_mem_cen,
sram_to_mem_wen,
sram_to_mem_addr,
mem_to_sram_data
);

input clk;
input clk_en;
input reset;
input flush;
input [`$wwidth - 1`:0] data_in;
input wen;
input ren;
input [`$awidth`:0] addr
input [`$wwidth`] mem_to_sram_data [`$bbanks-1`:0];


output [`$wwidth - 1`:0] data_out;
output [`$wwidth`:0] sram_to_mem_data [`$bbanks-1`:0];
output [0:0] sram_to_mem_cen [`$bbanks-1`:0];
output [0:0] sram_to_mem_wen [`$bbanks-1`:0];
output [`($awidth-$bank_addr_width)-1`:0] sram_to_mem_addr [`$bbanks-1`:0];


wire [`$bbanks-1`:0] bank_seld;
wire [`$bbanks-1`:0] sram_to_mem_ren;
wire clk_gated;


reg [`$bbanks-1`:0] sram_to_mem_ren_reg;

// =============
// Clock gate
// =============
assign clk_gated = clk & clk_en;

// ===========================
// Pass signals to actual memory module
// ===========================
//; for(my $i = 0; $i < $bbanks; $i++) {
	assign bank_seld[`$i`] = (addr[`$awidth-1`:`$awidth-$bank_addr_width-1`] == `$i`;

	assign sram_to_mem_data[`$i`] = data_in; 
	assign sram_to_mem_cen[`$i`] = bank_seld[`$i`] & (wen | ren);
	assign sram_to_mem_wen[`$i`] = bank_seld[`$i`] & wen;
	assign sram_to_mem_addr[`$i`] = addr[`$awidth-$bank_addr_width-1`:0];
//; }

// ===========================
// Pass the selected value to the data out
// ===========================
assign data_out = 
//; for(my $j = $bbanks-1; $j > 0; $j--) {
	sram_to_mem_ren_reg[`$j`] ? mem_to_sram_data[`$j`] :
//; }
	mem_to_sram_data[0];

// ===================
// Flop the ren for proper output
// ===================
always @ (posedge clk_gated, posedge reset) begin
	if(reset) begin
	//; for(my $i = 0; $i < $bbanks; $i++) {
		sram_to_mem_ren_reg[`$i`] <= 0;
	//; }	
	end
	else begin
		if(flush) begin
		//; for(my $i = 0; $i < $bbanks; $i++) {
			sram_to_mem_ren_reg[`$i`] <= 0;
		//; }				
		end
		else begin
		//; for(my $i = 0; $i < $bbanks; $i++) {
			sram_to_mem_ren_reg[`$i`] <=  bank_seld[`$i`] & ren;
		//; }
		end
	end
end


endmodule
