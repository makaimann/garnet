//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11879 $ --- $Date: 2013/06/11 $   |
//	-----------------------------------------------
//	
//
//  Source file: /nobackupkiwi/kongty/AHA/garnet/global_buffer/genesis/cfg_controller.svp
//  Source template: cfg_controller
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
// Parameter num_cfg_channels 	= 8
// Parameter num_banks 	= 32
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

/*=============================================================================
** Module: cfg_controller.sv
** Description:
**              Parallel configuration controller
** Author: Taeyoung Kong
** Change history: 04/21/2019 - Implement first version
**===========================================================================*/
// num_banks (_GENESIS2_INHERITANCE_PRIORITY_) = 32
//
// num_cfg_channels (_GENESIS2_INHERITANCE_PRIORITY_) = 8
//

module cfg_controller #(
    parameter integer GLB_ADDR_WIDTH = 32,
    parameter integer BANK_DATA_WIDTH = 64,
    parameter integer BANK_ADDR_WIDTH = 17,
    parameter integer CONFIG_REG_WIDTH = 4,
    parameter integer CONFIG_FEATURE_WIDTH = 4,
    parameter integer CONFIG_DATA_WIDTH = 32,
    parameter integer CFG_ADDR_WIDTH = 32,
    parameter integer CFG_DATA_WIDTH = 32,
    parameter integer CONFIG_FEATURE_REG_WIDTH = CONFIG_FEATURE_WIDTH+CONFIG_REG_WIDTH
)
(

    input  logic                                clk,
    input  logic                                reset,

    input  logic                                config_start_pulse,
    output logic                                config_done_pulse,
    
    output logic                                cfg_to_bank_rd_en [31:0],
    output logic [BANK_ADDR_WIDTH-1:0]          cfg_to_bank_rd_addr [31:0],
    input  logic [BANK_DATA_WIDTH-1:0]          bank_to_cfg_rd_data [31:0],

    input  logic                                glc_to_cgra_cfg_wr,
    input  logic                                glc_to_cgra_cfg_rd,
    input  logic [CFG_ADDR_WIDTH-1:0]           glc_to_cgra_cfg_addr,
    input  logic [CFG_DATA_WIDTH-1:0]           glc_to_cgra_cfg_data,

    output logic                                glb_to_cgra_cfg_wr [7:0],
    output logic                                glb_to_cgra_cfg_rd [7:0],
    output logic [CFG_ADDR_WIDTH-1:0]           glb_to_cgra_cfg_addr [7:0],
    output logic [CFG_DATA_WIDTH-1:0]           glb_to_cgra_cfg_data [7:0],

    input  logic                                config_en,
    input  logic                                config_wr,
    input  logic                                config_rd,
    input  logic [CONFIG_FEATURE_REG_WIDTH-1:0] config_addr,
    input  logic [CONFIG_DATA_WIDTH-1:0]        config_wr_data,
    output logic [CONFIG_DATA_WIDTH-1:0]        config_rd_data
);

//============================================================================//
// configuration
//============================================================================//
wire [CONFIG_FEATURE_WIDTH-1:0] config_feature_addr;
wire [CONFIG_REG_WIDTH-1:0]     config_reg_addr;
reg                             config_en_cfg_ctrl [7:0];

logic [3:0]    cfg_ctrl_switch_sel [7:0];
logic [GLB_ADDR_WIDTH-1:0]      cfg_ctrl_start_addr [7:0];
logic [GLB_ADDR_WIDTH-1:0]      cfg_ctrl_num_words [7:0];

assign config_feature_addr = config_addr[CONFIG_REG_WIDTH +: CONFIG_FEATURE_WIDTH];
assign config_reg_addr = config_addr[0 +: CONFIG_REG_WIDTH];

always_comb begin
    for(integer i=0; i<8; i=i+1) begin
        config_en_cfg_ctrl[i] = config_en && (config_feature_addr == i);
    end
end

always_ff @(posedge clk or posedge reset) begin
    if (reset) begin
        for(integer j=0; j<8; j=j+1) begin
            cfg_ctrl_start_addr[j] <= 0;
            cfg_ctrl_num_words[j] <= 0;
            cfg_ctrl_switch_sel[j] <= 0;
        end
    end
    else begin
        for(integer j=0; j<8; j=j+1) begin
            if (config_en_cfg_ctrl[j] && config_wr) begin
                case (config_reg_addr)
                    0: cfg_ctrl_start_addr[j] <= config_wr_data[GLB_ADDR_WIDTH-1:0];
                    1: cfg_ctrl_num_words[j] <= config_wr_data[GLB_ADDR_WIDTH-1:0];
                    2: cfg_ctrl_switch_sel[j] <= config_wr_data[3:0];
                endcase
            end
        end
    end
end

always_comb begin
    config_rd_data = 0;
    for(integer j=0; j<8; j=j+1) begin
        if (config_en_cfg_ctrl[j] && config_rd) begin
            case (config_reg_addr)
                0: config_rd_data = cfg_ctrl_start_addr[j];
                1: config_rd_data = cfg_ctrl_num_words[j];
                2: config_rd_data = cfg_ctrl_switch_sel[j];
                default: config_rd_data = 0;
            endcase
        end
    end
end

//============================================================================//
// internal signals
//============================================================================//
logic                       cfg_rd_en [7:0];
logic [BANK_DATA_WIDTH-1:0] cfg_rd_data [7:0];
logic                       cfg_rd_data_valid [7:0];
logic [GLB_ADDR_WIDTH-1:0]  cfg_addr [7:0];
logic                       cfg_config_done_pulse [7:0];
logic                       cfg_to_cgra_config_wr [7:0];
logic [CFG_ADDR_WIDTH-1:0]  cfg_to_cgra_config_addr [7:0];
logic [CFG_DATA_WIDTH-1:0]  cfg_to_cgra_config_data [7:0];

//============================================================================//
// parallel configuration controller instantiation
//============================================================================//
cfg_address_generator #(
    .BANK_DATA_WIDTH(BANK_DATA_WIDTH),
    .GLB_ADDR_WIDTH(GLB_ADDR_WIDTH),
    .CFG_ADDR_WIDTH(CFG_ADDR_WIDTH),
    .CFG_DATA_WIDTH(CFG_DATA_WIDTH)
) cfg_address_generator_0 (
    .clk(clk),
    .reset(reset),

    .config_start_pulse(config_start_pulse),
    .config_done_pulse(cfg_config_done_pulse[0]),

    .start_addr(cfg_ctrl_start_addr[0]),
    .num_words(cfg_ctrl_num_words[0]),

    .cfg_to_bank_rd_en(cfg_rd_en[0]),
    .bank_to_cfg_rd_data(cfg_rd_data[0]),
    .bank_to_cfg_rd_data_valid(cfg_rd_data_valid[0]),
    .cfg_to_bank_addr(cfg_addr[0]),

    .cfg_to_cgra_config_wr(cfg_to_cgra_config_wr[0]),
    .cfg_to_cgra_config_addr(cfg_to_cgra_config_addr[0]),
    .cfg_to_cgra_config_data(cfg_to_cgra_config_data[0])
);
cfg_address_generator #(
    .BANK_DATA_WIDTH(BANK_DATA_WIDTH),
    .GLB_ADDR_WIDTH(GLB_ADDR_WIDTH),
    .CFG_ADDR_WIDTH(CFG_ADDR_WIDTH),
    .CFG_DATA_WIDTH(CFG_DATA_WIDTH)
) cfg_address_generator_1 (
    .clk(clk),
    .reset(reset),

    .config_start_pulse(config_start_pulse),
    .config_done_pulse(cfg_config_done_pulse[1]),

    .start_addr(cfg_ctrl_start_addr[1]),
    .num_words(cfg_ctrl_num_words[1]),

    .cfg_to_bank_rd_en(cfg_rd_en[1]),
    .bank_to_cfg_rd_data(cfg_rd_data[1]),
    .bank_to_cfg_rd_data_valid(cfg_rd_data_valid[1]),
    .cfg_to_bank_addr(cfg_addr[1]),

    .cfg_to_cgra_config_wr(cfg_to_cgra_config_wr[1]),
    .cfg_to_cgra_config_addr(cfg_to_cgra_config_addr[1]),
    .cfg_to_cgra_config_data(cfg_to_cgra_config_data[1])
);
cfg_address_generator #(
    .BANK_DATA_WIDTH(BANK_DATA_WIDTH),
    .GLB_ADDR_WIDTH(GLB_ADDR_WIDTH),
    .CFG_ADDR_WIDTH(CFG_ADDR_WIDTH),
    .CFG_DATA_WIDTH(CFG_DATA_WIDTH)
) cfg_address_generator_2 (
    .clk(clk),
    .reset(reset),

    .config_start_pulse(config_start_pulse),
    .config_done_pulse(cfg_config_done_pulse[2]),

    .start_addr(cfg_ctrl_start_addr[2]),
    .num_words(cfg_ctrl_num_words[2]),

    .cfg_to_bank_rd_en(cfg_rd_en[2]),
    .bank_to_cfg_rd_data(cfg_rd_data[2]),
    .bank_to_cfg_rd_data_valid(cfg_rd_data_valid[2]),
    .cfg_to_bank_addr(cfg_addr[2]),

    .cfg_to_cgra_config_wr(cfg_to_cgra_config_wr[2]),
    .cfg_to_cgra_config_addr(cfg_to_cgra_config_addr[2]),
    .cfg_to_cgra_config_data(cfg_to_cgra_config_data[2])
);
cfg_address_generator #(
    .BANK_DATA_WIDTH(BANK_DATA_WIDTH),
    .GLB_ADDR_WIDTH(GLB_ADDR_WIDTH),
    .CFG_ADDR_WIDTH(CFG_ADDR_WIDTH),
    .CFG_DATA_WIDTH(CFG_DATA_WIDTH)
) cfg_address_generator_3 (
    .clk(clk),
    .reset(reset),

    .config_start_pulse(config_start_pulse),
    .config_done_pulse(cfg_config_done_pulse[3]),

    .start_addr(cfg_ctrl_start_addr[3]),
    .num_words(cfg_ctrl_num_words[3]),

    .cfg_to_bank_rd_en(cfg_rd_en[3]),
    .bank_to_cfg_rd_data(cfg_rd_data[3]),
    .bank_to_cfg_rd_data_valid(cfg_rd_data_valid[3]),
    .cfg_to_bank_addr(cfg_addr[3]),

    .cfg_to_cgra_config_wr(cfg_to_cgra_config_wr[3]),
    .cfg_to_cgra_config_addr(cfg_to_cgra_config_addr[3]),
    .cfg_to_cgra_config_data(cfg_to_cgra_config_data[3])
);
cfg_address_generator #(
    .BANK_DATA_WIDTH(BANK_DATA_WIDTH),
    .GLB_ADDR_WIDTH(GLB_ADDR_WIDTH),
    .CFG_ADDR_WIDTH(CFG_ADDR_WIDTH),
    .CFG_DATA_WIDTH(CFG_DATA_WIDTH)
) cfg_address_generator_4 (
    .clk(clk),
    .reset(reset),

    .config_start_pulse(config_start_pulse),
    .config_done_pulse(cfg_config_done_pulse[4]),

    .start_addr(cfg_ctrl_start_addr[4]),
    .num_words(cfg_ctrl_num_words[4]),

    .cfg_to_bank_rd_en(cfg_rd_en[4]),
    .bank_to_cfg_rd_data(cfg_rd_data[4]),
    .bank_to_cfg_rd_data_valid(cfg_rd_data_valid[4]),
    .cfg_to_bank_addr(cfg_addr[4]),

    .cfg_to_cgra_config_wr(cfg_to_cgra_config_wr[4]),
    .cfg_to_cgra_config_addr(cfg_to_cgra_config_addr[4]),
    .cfg_to_cgra_config_data(cfg_to_cgra_config_data[4])
);
cfg_address_generator #(
    .BANK_DATA_WIDTH(BANK_DATA_WIDTH),
    .GLB_ADDR_WIDTH(GLB_ADDR_WIDTH),
    .CFG_ADDR_WIDTH(CFG_ADDR_WIDTH),
    .CFG_DATA_WIDTH(CFG_DATA_WIDTH)
) cfg_address_generator_5 (
    .clk(clk),
    .reset(reset),

    .config_start_pulse(config_start_pulse),
    .config_done_pulse(cfg_config_done_pulse[5]),

    .start_addr(cfg_ctrl_start_addr[5]),
    .num_words(cfg_ctrl_num_words[5]),

    .cfg_to_bank_rd_en(cfg_rd_en[5]),
    .bank_to_cfg_rd_data(cfg_rd_data[5]),
    .bank_to_cfg_rd_data_valid(cfg_rd_data_valid[5]),
    .cfg_to_bank_addr(cfg_addr[5]),

    .cfg_to_cgra_config_wr(cfg_to_cgra_config_wr[5]),
    .cfg_to_cgra_config_addr(cfg_to_cgra_config_addr[5]),
    .cfg_to_cgra_config_data(cfg_to_cgra_config_data[5])
);
cfg_address_generator #(
    .BANK_DATA_WIDTH(BANK_DATA_WIDTH),
    .GLB_ADDR_WIDTH(GLB_ADDR_WIDTH),
    .CFG_ADDR_WIDTH(CFG_ADDR_WIDTH),
    .CFG_DATA_WIDTH(CFG_DATA_WIDTH)
) cfg_address_generator_6 (
    .clk(clk),
    .reset(reset),

    .config_start_pulse(config_start_pulse),
    .config_done_pulse(cfg_config_done_pulse[6]),

    .start_addr(cfg_ctrl_start_addr[6]),
    .num_words(cfg_ctrl_num_words[6]),

    .cfg_to_bank_rd_en(cfg_rd_en[6]),
    .bank_to_cfg_rd_data(cfg_rd_data[6]),
    .bank_to_cfg_rd_data_valid(cfg_rd_data_valid[6]),
    .cfg_to_bank_addr(cfg_addr[6]),

    .cfg_to_cgra_config_wr(cfg_to_cgra_config_wr[6]),
    .cfg_to_cgra_config_addr(cfg_to_cgra_config_addr[6]),
    .cfg_to_cgra_config_data(cfg_to_cgra_config_data[6])
);
cfg_address_generator #(
    .BANK_DATA_WIDTH(BANK_DATA_WIDTH),
    .GLB_ADDR_WIDTH(GLB_ADDR_WIDTH),
    .CFG_ADDR_WIDTH(CFG_ADDR_WIDTH),
    .CFG_DATA_WIDTH(CFG_DATA_WIDTH)
) cfg_address_generator_7 (
    .clk(clk),
    .reset(reset),

    .config_start_pulse(config_start_pulse),
    .config_done_pulse(cfg_config_done_pulse[7]),

    .start_addr(cfg_ctrl_start_addr[7]),
    .num_words(cfg_ctrl_num_words[7]),

    .cfg_to_bank_rd_en(cfg_rd_en[7]),
    .bank_to_cfg_rd_data(cfg_rd_data[7]),
    .bank_to_cfg_rd_data_valid(cfg_rd_data_valid[7]),
    .cfg_to_bank_addr(cfg_addr[7]),

    .cfg_to_cgra_config_wr(cfg_to_cgra_config_wr[7]),
    .cfg_to_cgra_config_addr(cfg_to_cgra_config_addr[7]),
    .cfg_to_cgra_config_data(cfg_to_cgra_config_data[7])
);

//============================================================================//
// config_start_pulse & config_done_pulse
//============================================================================//
logic [7:0] cfg_config_done_reg;
logic                           config_done_all;
logic                           config_done_all_d1;

always_ff @(posedge clk or posedge reset) begin
    if (reset) begin
        cfg_config_done_reg <= 0;
    end
    else begin
        if (config_start_pulse) begin
            cfg_config_done_reg <= 0;
        end
        else begin
            for (integer j=0; j<8; j=j+1) begin
                if (cfg_config_done_pulse[j] == 1) begin
                    cfg_config_done_reg[j] <= 1;
                end
            end
        end
    end
end

// if all cfg_config_done_reg goes high, config_done_all goes high
assign config_done_all = &cfg_config_done_reg;

// generate pulse for one cycle
always_ff @(posedge clk) begin
    config_done_all_d1 <= config_done_all;
end
assign config_done_pulse = config_done_all & (!config_done_all_d1);

//============================================================================//
// address channel interconnection network with pipeline
//============================================================================//
reg [GLB_ADDR_WIDTH-1:0]    bank_addr_int [31:0];
always_comb begin
    for (integer j=0; j<8; j=j+1) begin
        for (integer k=0; k<4; k=k+1) begin
            if (j==0 && k==0) begin
                bank_addr_int[0] = cfg_ctrl_switch_sel[0][0] ? cfg_addr[0] : 0;
            end
            else begin
                bank_addr_int[j*4+k] = cfg_ctrl_switch_sel[j][k] ? cfg_addr[j] : bank_addr_int[j*4+k-1];
            end
        end
    end
end

//============================================================================//
// bitstream channel interconnection network with pipeline
//============================================================================//
logic                       bank_rd_en_int [31:0];
logic                       cfg_to_bank_rd_en_int_d1 [31:0];
logic                       cfg_to_bank_rd_en_int_d2 [31:0];
logic [BANK_DATA_WIDTH-1:0] cfg_rd_data_int [7:0];
logic [BANK_DATA_WIDTH-1:0] bank_rd_data_int [31:0];
logic [BANK_DATA_WIDTH-1:0] bank_to_cfg_rd_data_d1 [31:0];


always_comb begin
    for (integer j=0; j<8; j=j+1) begin
        for (integer k=0; k<4; k=k+1) begin
            if (j==0 && k==0) begin
                bank_rd_en_int[0] = cfg_ctrl_switch_sel[0][0] ? cfg_rd_en[0] : 0; 
            end
            else begin
                bank_rd_en_int[j*4+k] = cfg_ctrl_switch_sel[j][k] ? cfg_rd_en[j] : bank_rd_en_int[j*4+k-1];
            end
        end
    end
end

always_ff @(posedge clk) begin
    for (integer i=0; i<32; i=i+1) begin
        cfg_to_bank_rd_en_int_d1[i] <= cfg_to_bank_rd_en[i];
        cfg_to_bank_rd_en_int_d2[i] <= cfg_to_bank_rd_en_int_d1[i];
    end
end

always_ff @(posedge clk) begin
    for (integer i=0; i<32; i=i+1) begin
        bank_to_cfg_rd_data_d1[i] <= bank_to_cfg_rd_data[i]; 
    end
end

always_comb begin
    for (integer k=31; k>=0; k=k-1) begin
        if (k == 31) begin
            bank_rd_data_int[31] = cfg_to_bank_rd_en_int_d2[31] ? bank_to_cfg_rd_data_d1[31] : 0;
        end
        else begin
            bank_rd_data_int[k] = cfg_to_bank_rd_en_int_d2[k] ? bank_to_cfg_rd_data_d1[k] : bank_rd_data_int[k+1];
        end
    end
end

always_comb begin
    for (integer j=0; j<8; j=j+1) begin
        if (cfg_ctrl_switch_sel[j][0] == 1'b1) begin
            cfg_rd_data_int[j] = bank_rd_data_int[j*4];
        end
        else if (cfg_ctrl_switch_sel[j][1] == 1'b1) begin
            cfg_rd_data_int[j] = bank_rd_data_int[j*4+1];
        end
        else if (cfg_ctrl_switch_sel[j][2] == 1'b1) begin
            cfg_rd_data_int[j] = bank_rd_data_int[j*4+2];
        end
        else if (cfg_ctrl_switch_sel[j][3] == 1'b1) begin
            cfg_rd_data_int[j] = bank_rd_data_int[j*4+3];
        end
        else begin
            cfg_rd_data_int[j] = 0;
        end
    end
end

assign cfg_rd_data = cfg_rd_data_int;

//============================================================================//
// rd_data_valid channel interconnection network with pipeline
//============================================================================//
logic bank_to_cfg_rd_data_valid [31:0];
logic bank_rd_data_valid_int [31:0];
logic cfg_rd_data_valid_int [7:0];

// if bank_rd_en is high, rd_data_valid goes high after 2 cycle latency
assign bank_to_cfg_rd_data_valid = cfg_to_bank_rd_en_int_d2;

always_comb begin
    for (integer k=31; k>=0; k=k-1) begin
        if (k == 31) begin
            bank_rd_data_valid_int[31] = cfg_to_bank_rd_en_int_d2[31] ? bank_to_cfg_rd_data_valid[31] : 0;
        end
        else begin
            bank_rd_data_valid_int[k] = cfg_to_bank_rd_en_int_d2[k] ? bank_to_cfg_rd_data_valid[k] : bank_rd_data_valid_int[k+1];
        end
    end
end

always_comb begin
    for (integer j=0; j<8; j=j+1) begin
        if (cfg_ctrl_switch_sel[j][0] == 1'b1) begin
            cfg_rd_data_valid_int[j] = bank_rd_data_valid_int[j*4];
        end
        else if (cfg_ctrl_switch_sel[j][1] == 1'b1) begin
            cfg_rd_data_valid_int[j] = bank_rd_data_valid_int[j*4+1];
        end
        else if (cfg_ctrl_switch_sel[j][2] == 1'b1) begin
            cfg_rd_data_valid_int[j] = bank_rd_data_valid_int[j*4+2];
        end
        else if (cfg_ctrl_switch_sel[j][3] == 1'b1) begin
            cfg_rd_data_valid_int[j] = bank_rd_data_valid_int[j*4+3];
        end
        else begin
            cfg_rd_data_valid_int[j] = 0;
        end
    end
end

assign cfg_rd_data_valid = cfg_rd_data_valid_int;

//============================================================================//
// output assignment
//============================================================================//
logic                       int_cfg_to_cgra_config_wr [7:0];
logic [CFG_ADDR_WIDTH-1:0]  int_cfg_to_cgra_config_addr [7:0];
logic [CFG_DATA_WIDTH-1:0]  int_cfg_to_cgra_config_data [7:0];

// if cfg_ctrl is turned off, just use the previous cfg_ctrl value to fanout
always_comb begin
    for (integer k=0; k<8; k=k+1) begin
        if (k==0) begin
            int_cfg_to_cgra_config_wr[k] = cfg_to_cgra_config_wr[k];
            int_cfg_to_cgra_config_addr[k] = cfg_to_cgra_config_addr[k];
            int_cfg_to_cgra_config_data[k] = cfg_to_cgra_config_data[k];
        end
        else begin
            if (cfg_ctrl_switch_sel[k] == {4{1'b0}}) begin
                int_cfg_to_cgra_config_wr[k] = int_cfg_to_cgra_config_wr[k-1];
                int_cfg_to_cgra_config_addr[k] = int_cfg_to_cgra_config_addr[k-1];
                int_cfg_to_cgra_config_data[k] = int_cfg_to_cgra_config_data[k-1];
            end
            else begin
                int_cfg_to_cgra_config_wr[k] = cfg_to_cgra_config_wr[k];
                int_cfg_to_cgra_config_addr[k] = cfg_to_cgra_config_addr[k];
                int_cfg_to_cgra_config_data[k] = cfg_to_cgra_config_data[k];
            end
        end
    end
end

always_comb begin
    for (integer k=0; k<32; k=k+1) begin
        cfg_to_bank_rd_addr[k] = bank_addr_int[k][BANK_ADDR_WIDTH-1:0];
    end
end

always_comb begin
    for (integer k=0; k<32; k=k+1) begin
        cfg_to_bank_rd_en[k] = bank_rd_en_int[k] && (bank_addr_int[k][GLB_ADDR_WIDTH-1:BANK_ADDR_WIDTH] == k);
    end
end

// Parallel configuration is only for configuration write
// During reading, address from global controller fan out
// assign bitstream read
always_comb begin
    for (integer k=0; k<8; k=k+1) begin
        glb_to_cgra_cfg_rd[k] = glc_to_cgra_cfg_rd;
    end
end

// assign bitstream write
always_comb begin
    for (integer k=0; k<8; k=k+1) begin
        glb_to_cgra_cfg_wr[k] = int_cfg_to_cgra_config_wr[k] | glc_to_cgra_cfg_wr;
    end
end

// assign bitstream addr
always_comb begin
    if (glc_to_cgra_cfg_rd | glc_to_cgra_cfg_wr) begin
        for (integer k=0; k<8; k=k+1) begin
            glb_to_cgra_cfg_addr[k] = glc_to_cgra_cfg_addr;
        end
    end
    else begin
        for (integer k=0; k<8; k=k+1) begin
            glb_to_cgra_cfg_addr[k] = int_cfg_to_cgra_config_addr[k];
        end
    end
end

// assign bitstream data
always_comb begin
    if (glc_to_cgra_cfg_rd | glc_to_cgra_cfg_wr) begin
        for (integer k=0; k<8; k=k+1) begin
            glb_to_cgra_cfg_data[k] = glc_to_cgra_cfg_data;
        end
    end
    else begin
        for (integer k=0; k<8; k=k+1) begin
            glb_to_cgra_cfg_data[k] = int_cfg_to_cgra_config_data[k];
        end
    end
end

endmodule
