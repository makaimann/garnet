//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11879 $ --- $Date: 2013/06/11 $   |
//	-----------------------------------------------
//	
//
//  Source file: /nobackupkiwi/kongty/AHA/garnet/global_buffer/genesis/io_controller.svp
//  Source template: io_controller
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
// Parameter num_banks 	= 32
// Parameter num_io_channels 	= 8
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

/*=============================================================================
** Module: io_controller.sv
** Description:
**              I/O controller between GLB and CGRA
** Author: Taeyoung Kong
** Change history: 04/20/2019 - Implement first version
**===========================================================================*/
// num_banks (_GENESIS2_INHERITANCE_PRIORITY_) = 32
//
// num_io_channels (_GENESIS2_INHERITANCE_PRIORITY_) = 8
//

module io_controller #(
    parameter integer GLB_ADDR_WIDTH = 32,
    parameter integer BANK_DATA_WIDTH = 64,
    parameter integer BANK_ADDR_WIDTH = 17,
    parameter integer CGRA_DATA_WIDTH = 16,
    parameter integer CONFIG_REG_WIDTH = 4,
    parameter integer CONFIG_FEATURE_WIDTH = 4,
    parameter integer CONFIG_DATA_WIDTH = 32,
    parameter integer CONFIG_FEATURE_REG_WIDTH = CONFIG_FEATURE_WIDTH+CONFIG_REG_WIDTH
)
(

    input                                       clk,
    input                                       reset,

    input                                       cgra_start_pulse,
    output logic                                cgra_done_pulse,

    input                                       glc_to_io_stall,
    //input                                       cgra_to_io_stall [7:0],
    input                                       cgra_to_io_wr_en [7:0],
    input                                       cgra_to_io_rd_en [7:0],
    output logic                                io_to_cgra_rd_data_valid [7:0],
    input        [CGRA_DATA_WIDTH-1:0]          cgra_to_io_wr_data [7:0],
    output logic [CGRA_DATA_WIDTH-1:0]          io_to_cgra_rd_data [7:0],
    input        [CGRA_DATA_WIDTH-1:0]          cgra_to_io_addr_high [7:0],
    input        [CGRA_DATA_WIDTH-1:0]          cgra_to_io_addr_low [7:0],
    
    output logic                                io_to_bank_wr_en [31:0],
    output logic [BANK_DATA_WIDTH-1:0]          io_to_bank_wr_data [31:0],
    output logic [BANK_DATA_WIDTH-1:0]          io_to_bank_wr_data_bit_sel [31:0],
    output logic [BANK_ADDR_WIDTH-1:0]          io_to_bank_wr_addr [31:0],
    output logic                                io_to_bank_rd_en [31:0],
    input        [BANK_DATA_WIDTH-1:0]          bank_to_io_rd_data [31:0],
    output logic [BANK_ADDR_WIDTH-1:0]          io_to_bank_rd_addr [31:0],

    input                                       config_en,
    input                                       config_wr,
    input                                       config_rd,
    input        [CONFIG_FEATURE_REG_WIDTH-1:0] config_addr,
    input        [CONFIG_DATA_WIDTH-1:0]        config_wr_data,
    output logic [CONFIG_DATA_WIDTH-1:0]        config_rd_data
);

//============================================================================//
// local parameter declaration
//============================================================================//
localparam integer IDLE_MODE = 0;

//============================================================================//
// internal signals
//============================================================================//
logic                           io_wr_en [7:0];
logic                           io_rd_en [7:0];
logic [BANK_DATA_WIDTH-1:0]     io_wr_data [7:0];
logic [BANK_DATA_WIDTH-1:0]     io_wr_data_bit_sel [7:0];
logic [BANK_DATA_WIDTH-1:0]     io_rd_data [7:0];
logic                           io_rd_data_valid [7:0];

logic [GLB_ADDR_WIDTH-1:0]      io_addr [7:0];
logic                           io_cgra_start_pulse [7:0];
logic                           io_cgra_done_pulse [7:0];
logic [GLB_ADDR_WIDTH-1:0]      io_ctrl_start_addr [7:0];
logic [GLB_ADDR_WIDTH-1:0]      io_ctrl_num_words [7:0];
logic [1:0]                     io_ctrl_mode [7:0];
logic [3:0]     io_ctrl_switch_sel [7:0];
logic [CONFIG_DATA_WIDTH-1:0]   io_ctrl_done_delay [7:0];

//============================================================================//
// clk enable signal
//============================================================================//
logic clk_en;
assign clk_en = !glc_to_io_stall;

//============================================================================//
// io controller instantiation
//============================================================================//
io_address_generator #(
    .BANK_DATA_WIDTH(BANK_DATA_WIDTH),
    .CGRA_DATA_WIDTH(CGRA_DATA_WIDTH),
    .GLB_ADDR_WIDTH(GLB_ADDR_WIDTH),
    .CONFIG_DATA_WIDTH(CONFIG_DATA_WIDTH),
    .IDLE_MODE(IDLE_MODE)
) io_address_generator_0 (
    .clk(clk),
    .clk_en(clk_en),
    .reset(reset),

    .cgra_start_pulse(io_cgra_start_pulse[0]),
    .cgra_done_pulse(io_cgra_done_pulse[0]),

    .start_addr(io_ctrl_start_addr[0]),
    .num_words(io_ctrl_num_words[0]),
    .mode(io_ctrl_mode[0]),
    .done_delay(io_ctrl_done_delay[0]),

    .cgra_to_io_wr_en(cgra_to_io_wr_en[0]),
    .cgra_to_io_rd_en(cgra_to_io_rd_en[0]),
    .io_to_cgra_rd_data_valid(io_to_cgra_rd_data_valid[0]),
    .cgra_to_io_addr_high(cgra_to_io_addr_high[0]),
    .cgra_to_io_addr_low(cgra_to_io_addr_low[0]),
    .cgra_to_io_wr_data(cgra_to_io_wr_data[0]),
    .io_to_cgra_rd_data(io_to_cgra_rd_data[0]),

    .io_to_bank_wr_en(io_wr_en[0]),
    .io_to_bank_wr_data(io_wr_data[0]),
    .io_to_bank_wr_data_bit_sel(io_wr_data_bit_sel[0]),
    .io_to_bank_rd_en(io_rd_en[0]),
    .bank_to_io_rd_data(io_rd_data[0]),
    .bank_to_io_rd_data_valid(io_rd_data_valid[0]),
    .io_to_bank_addr(io_addr[0])
);
io_address_generator #(
    .BANK_DATA_WIDTH(BANK_DATA_WIDTH),
    .CGRA_DATA_WIDTH(CGRA_DATA_WIDTH),
    .GLB_ADDR_WIDTH(GLB_ADDR_WIDTH),
    .CONFIG_DATA_WIDTH(CONFIG_DATA_WIDTH),
    .IDLE_MODE(IDLE_MODE)
) io_address_generator_1 (
    .clk(clk),
    .clk_en(clk_en),
    .reset(reset),

    .cgra_start_pulse(io_cgra_start_pulse[1]),
    .cgra_done_pulse(io_cgra_done_pulse[1]),

    .start_addr(io_ctrl_start_addr[1]),
    .num_words(io_ctrl_num_words[1]),
    .mode(io_ctrl_mode[1]),
    .done_delay(io_ctrl_done_delay[1]),

    .cgra_to_io_wr_en(cgra_to_io_wr_en[1]),
    .cgra_to_io_rd_en(cgra_to_io_rd_en[1]),
    .io_to_cgra_rd_data_valid(io_to_cgra_rd_data_valid[1]),
    .cgra_to_io_addr_high(cgra_to_io_addr_high[1]),
    .cgra_to_io_addr_low(cgra_to_io_addr_low[1]),
    .cgra_to_io_wr_data(cgra_to_io_wr_data[1]),
    .io_to_cgra_rd_data(io_to_cgra_rd_data[1]),

    .io_to_bank_wr_en(io_wr_en[1]),
    .io_to_bank_wr_data(io_wr_data[1]),
    .io_to_bank_wr_data_bit_sel(io_wr_data_bit_sel[1]),
    .io_to_bank_rd_en(io_rd_en[1]),
    .bank_to_io_rd_data(io_rd_data[1]),
    .bank_to_io_rd_data_valid(io_rd_data_valid[1]),
    .io_to_bank_addr(io_addr[1])
);
io_address_generator #(
    .BANK_DATA_WIDTH(BANK_DATA_WIDTH),
    .CGRA_DATA_WIDTH(CGRA_DATA_WIDTH),
    .GLB_ADDR_WIDTH(GLB_ADDR_WIDTH),
    .CONFIG_DATA_WIDTH(CONFIG_DATA_WIDTH),
    .IDLE_MODE(IDLE_MODE)
) io_address_generator_2 (
    .clk(clk),
    .clk_en(clk_en),
    .reset(reset),

    .cgra_start_pulse(io_cgra_start_pulse[2]),
    .cgra_done_pulse(io_cgra_done_pulse[2]),

    .start_addr(io_ctrl_start_addr[2]),
    .num_words(io_ctrl_num_words[2]),
    .mode(io_ctrl_mode[2]),
    .done_delay(io_ctrl_done_delay[2]),

    .cgra_to_io_wr_en(cgra_to_io_wr_en[2]),
    .cgra_to_io_rd_en(cgra_to_io_rd_en[2]),
    .io_to_cgra_rd_data_valid(io_to_cgra_rd_data_valid[2]),
    .cgra_to_io_addr_high(cgra_to_io_addr_high[2]),
    .cgra_to_io_addr_low(cgra_to_io_addr_low[2]),
    .cgra_to_io_wr_data(cgra_to_io_wr_data[2]),
    .io_to_cgra_rd_data(io_to_cgra_rd_data[2]),

    .io_to_bank_wr_en(io_wr_en[2]),
    .io_to_bank_wr_data(io_wr_data[2]),
    .io_to_bank_wr_data_bit_sel(io_wr_data_bit_sel[2]),
    .io_to_bank_rd_en(io_rd_en[2]),
    .bank_to_io_rd_data(io_rd_data[2]),
    .bank_to_io_rd_data_valid(io_rd_data_valid[2]),
    .io_to_bank_addr(io_addr[2])
);
io_address_generator #(
    .BANK_DATA_WIDTH(BANK_DATA_WIDTH),
    .CGRA_DATA_WIDTH(CGRA_DATA_WIDTH),
    .GLB_ADDR_WIDTH(GLB_ADDR_WIDTH),
    .CONFIG_DATA_WIDTH(CONFIG_DATA_WIDTH),
    .IDLE_MODE(IDLE_MODE)
) io_address_generator_3 (
    .clk(clk),
    .clk_en(clk_en),
    .reset(reset),

    .cgra_start_pulse(io_cgra_start_pulse[3]),
    .cgra_done_pulse(io_cgra_done_pulse[3]),

    .start_addr(io_ctrl_start_addr[3]),
    .num_words(io_ctrl_num_words[3]),
    .mode(io_ctrl_mode[3]),
    .done_delay(io_ctrl_done_delay[3]),

    .cgra_to_io_wr_en(cgra_to_io_wr_en[3]),
    .cgra_to_io_rd_en(cgra_to_io_rd_en[3]),
    .io_to_cgra_rd_data_valid(io_to_cgra_rd_data_valid[3]),
    .cgra_to_io_addr_high(cgra_to_io_addr_high[3]),
    .cgra_to_io_addr_low(cgra_to_io_addr_low[3]),
    .cgra_to_io_wr_data(cgra_to_io_wr_data[3]),
    .io_to_cgra_rd_data(io_to_cgra_rd_data[3]),

    .io_to_bank_wr_en(io_wr_en[3]),
    .io_to_bank_wr_data(io_wr_data[3]),
    .io_to_bank_wr_data_bit_sel(io_wr_data_bit_sel[3]),
    .io_to_bank_rd_en(io_rd_en[3]),
    .bank_to_io_rd_data(io_rd_data[3]),
    .bank_to_io_rd_data_valid(io_rd_data_valid[3]),
    .io_to_bank_addr(io_addr[3])
);
io_address_generator #(
    .BANK_DATA_WIDTH(BANK_DATA_WIDTH),
    .CGRA_DATA_WIDTH(CGRA_DATA_WIDTH),
    .GLB_ADDR_WIDTH(GLB_ADDR_WIDTH),
    .CONFIG_DATA_WIDTH(CONFIG_DATA_WIDTH),
    .IDLE_MODE(IDLE_MODE)
) io_address_generator_4 (
    .clk(clk),
    .clk_en(clk_en),
    .reset(reset),

    .cgra_start_pulse(io_cgra_start_pulse[4]),
    .cgra_done_pulse(io_cgra_done_pulse[4]),

    .start_addr(io_ctrl_start_addr[4]),
    .num_words(io_ctrl_num_words[4]),
    .mode(io_ctrl_mode[4]),
    .done_delay(io_ctrl_done_delay[4]),

    .cgra_to_io_wr_en(cgra_to_io_wr_en[4]),
    .cgra_to_io_rd_en(cgra_to_io_rd_en[4]),
    .io_to_cgra_rd_data_valid(io_to_cgra_rd_data_valid[4]),
    .cgra_to_io_addr_high(cgra_to_io_addr_high[4]),
    .cgra_to_io_addr_low(cgra_to_io_addr_low[4]),
    .cgra_to_io_wr_data(cgra_to_io_wr_data[4]),
    .io_to_cgra_rd_data(io_to_cgra_rd_data[4]),

    .io_to_bank_wr_en(io_wr_en[4]),
    .io_to_bank_wr_data(io_wr_data[4]),
    .io_to_bank_wr_data_bit_sel(io_wr_data_bit_sel[4]),
    .io_to_bank_rd_en(io_rd_en[4]),
    .bank_to_io_rd_data(io_rd_data[4]),
    .bank_to_io_rd_data_valid(io_rd_data_valid[4]),
    .io_to_bank_addr(io_addr[4])
);
io_address_generator #(
    .BANK_DATA_WIDTH(BANK_DATA_WIDTH),
    .CGRA_DATA_WIDTH(CGRA_DATA_WIDTH),
    .GLB_ADDR_WIDTH(GLB_ADDR_WIDTH),
    .CONFIG_DATA_WIDTH(CONFIG_DATA_WIDTH),
    .IDLE_MODE(IDLE_MODE)
) io_address_generator_5 (
    .clk(clk),
    .clk_en(clk_en),
    .reset(reset),

    .cgra_start_pulse(io_cgra_start_pulse[5]),
    .cgra_done_pulse(io_cgra_done_pulse[5]),

    .start_addr(io_ctrl_start_addr[5]),
    .num_words(io_ctrl_num_words[5]),
    .mode(io_ctrl_mode[5]),
    .done_delay(io_ctrl_done_delay[5]),

    .cgra_to_io_wr_en(cgra_to_io_wr_en[5]),
    .cgra_to_io_rd_en(cgra_to_io_rd_en[5]),
    .io_to_cgra_rd_data_valid(io_to_cgra_rd_data_valid[5]),
    .cgra_to_io_addr_high(cgra_to_io_addr_high[5]),
    .cgra_to_io_addr_low(cgra_to_io_addr_low[5]),
    .cgra_to_io_wr_data(cgra_to_io_wr_data[5]),
    .io_to_cgra_rd_data(io_to_cgra_rd_data[5]),

    .io_to_bank_wr_en(io_wr_en[5]),
    .io_to_bank_wr_data(io_wr_data[5]),
    .io_to_bank_wr_data_bit_sel(io_wr_data_bit_sel[5]),
    .io_to_bank_rd_en(io_rd_en[5]),
    .bank_to_io_rd_data(io_rd_data[5]),
    .bank_to_io_rd_data_valid(io_rd_data_valid[5]),
    .io_to_bank_addr(io_addr[5])
);
io_address_generator #(
    .BANK_DATA_WIDTH(BANK_DATA_WIDTH),
    .CGRA_DATA_WIDTH(CGRA_DATA_WIDTH),
    .GLB_ADDR_WIDTH(GLB_ADDR_WIDTH),
    .CONFIG_DATA_WIDTH(CONFIG_DATA_WIDTH),
    .IDLE_MODE(IDLE_MODE)
) io_address_generator_6 (
    .clk(clk),
    .clk_en(clk_en),
    .reset(reset),

    .cgra_start_pulse(io_cgra_start_pulse[6]),
    .cgra_done_pulse(io_cgra_done_pulse[6]),

    .start_addr(io_ctrl_start_addr[6]),
    .num_words(io_ctrl_num_words[6]),
    .mode(io_ctrl_mode[6]),
    .done_delay(io_ctrl_done_delay[6]),

    .cgra_to_io_wr_en(cgra_to_io_wr_en[6]),
    .cgra_to_io_rd_en(cgra_to_io_rd_en[6]),
    .io_to_cgra_rd_data_valid(io_to_cgra_rd_data_valid[6]),
    .cgra_to_io_addr_high(cgra_to_io_addr_high[6]),
    .cgra_to_io_addr_low(cgra_to_io_addr_low[6]),
    .cgra_to_io_wr_data(cgra_to_io_wr_data[6]),
    .io_to_cgra_rd_data(io_to_cgra_rd_data[6]),

    .io_to_bank_wr_en(io_wr_en[6]),
    .io_to_bank_wr_data(io_wr_data[6]),
    .io_to_bank_wr_data_bit_sel(io_wr_data_bit_sel[6]),
    .io_to_bank_rd_en(io_rd_en[6]),
    .bank_to_io_rd_data(io_rd_data[6]),
    .bank_to_io_rd_data_valid(io_rd_data_valid[6]),
    .io_to_bank_addr(io_addr[6])
);
io_address_generator #(
    .BANK_DATA_WIDTH(BANK_DATA_WIDTH),
    .CGRA_DATA_WIDTH(CGRA_DATA_WIDTH),
    .GLB_ADDR_WIDTH(GLB_ADDR_WIDTH),
    .CONFIG_DATA_WIDTH(CONFIG_DATA_WIDTH),
    .IDLE_MODE(IDLE_MODE)
) io_address_generator_7 (
    .clk(clk),
    .clk_en(clk_en),
    .reset(reset),

    .cgra_start_pulse(io_cgra_start_pulse[7]),
    .cgra_done_pulse(io_cgra_done_pulse[7]),

    .start_addr(io_ctrl_start_addr[7]),
    .num_words(io_ctrl_num_words[7]),
    .mode(io_ctrl_mode[7]),
    .done_delay(io_ctrl_done_delay[7]),

    .cgra_to_io_wr_en(cgra_to_io_wr_en[7]),
    .cgra_to_io_rd_en(cgra_to_io_rd_en[7]),
    .io_to_cgra_rd_data_valid(io_to_cgra_rd_data_valid[7]),
    .cgra_to_io_addr_high(cgra_to_io_addr_high[7]),
    .cgra_to_io_addr_low(cgra_to_io_addr_low[7]),
    .cgra_to_io_wr_data(cgra_to_io_wr_data[7]),
    .io_to_cgra_rd_data(io_to_cgra_rd_data[7]),

    .io_to_bank_wr_en(io_wr_en[7]),
    .io_to_bank_wr_data(io_wr_data[7]),
    .io_to_bank_wr_data_bit_sel(io_wr_data_bit_sel[7]),
    .io_to_bank_rd_en(io_rd_en[7]),
    .bank_to_io_rd_data(io_rd_data[7]),
    .bank_to_io_rd_data_valid(io_rd_data_valid[7]),
    .io_to_bank_addr(io_addr[7])
);

//============================================================================//
// configuration
//============================================================================//
wire [CONFIG_FEATURE_WIDTH-1:0] config_feature_addr;
wire [CONFIG_REG_WIDTH-1:0]     config_reg_addr;
reg                             config_en_io_ctrl [7:0];

assign config_reg_addr = config_addr[0 +: CONFIG_REG_WIDTH];
assign config_feature_addr = config_addr[CONFIG_REG_WIDTH +: CONFIG_FEATURE_WIDTH];

always_comb begin
    for(integer i=0; i<8; i=i+1) begin
        config_en_io_ctrl[i] = config_en && (config_feature_addr == i);
    end
end

always_ff @(posedge clk or posedge reset) begin
    if (reset) begin
        for(integer j=0; j<8; j=j+1) begin
            io_ctrl_mode[j] <= 0;
            io_ctrl_start_addr[j] <= 0;
            io_ctrl_num_words[j] <= 0;
            io_ctrl_switch_sel[j] <= 0;
            io_ctrl_done_delay[j] <= 0;
        end
    end
    else begin
        for(integer j=0; j<8; j=j+1) begin
            if (config_en_io_ctrl[j] && config_wr) begin
                case (config_reg_addr)
                    0: io_ctrl_mode[j] <= config_wr_data[1:0];
                    1: io_ctrl_start_addr[j] <= config_wr_data[GLB_ADDR_WIDTH-1:0];
                    2: io_ctrl_num_words[j] <= config_wr_data[GLB_ADDR_WIDTH-1:0];
                    3: io_ctrl_switch_sel[j] <= config_wr_data[3:0];
                    4: io_ctrl_done_delay[j] <= config_wr_data;
                endcase
            end
        end
    end
end

always_comb begin
    config_rd_data = 0;
    for(integer j=0; j<8; j=j+1) begin
        if (config_en_io_ctrl[j] && config_rd) begin
            case (config_reg_addr)
                0: config_rd_data = io_ctrl_mode[j];
                1: config_rd_data = io_ctrl_start_addr[j];
                2: config_rd_data = io_ctrl_num_words[j];
                3: config_rd_data = io_ctrl_switch_sel[j];
                4: config_rd_data = io_ctrl_done_delay[j];
                default: config_rd_data = 0;
            endcase
        end
    end
end

//============================================================================//
// cgra_start_pulse & cgra_done_pulse
//============================================================================//
logic [7:0]  io_cgra_done_reg;
logic [7:0]  io_cgra_done_gated;
logic [7:0]  io_ctrl_off;
logic                           io_ctrl_off_all;
logic                           cgra_done_all;
logic                           cgra_done_all_d1;

// cgra_start_pulse
always_comb begin
    for (integer j=0; j<8; j=j+1) begin
        io_cgra_start_pulse[j] = cgra_start_pulse;
    end
end

always_ff @(posedge clk or posedge reset) begin
    if (reset) begin
        io_cgra_done_reg <= 0;
    end
    else begin
        if (cgra_start_pulse) begin
            io_cgra_done_reg <= 0;
        end
        else begin
            for (integer j=0; j<8; j=j+1) begin
                if (io_cgra_done_pulse[j] == 1) begin
                    io_cgra_done_reg[j] <= 1;
                end
            end
        end
    end
end

always_comb begin
    for (integer i=0; i<8; i=i+1) begin
        io_ctrl_off[i] = io_ctrl_mode[i] == IDLE_MODE;
    end
end
assign io_ctrl_off_all = &io_ctrl_off;

// only if io_ctrl is not off, we use cgra_done from controller
always_comb begin
    for (integer i=0; i<8; i=i+1) begin
        io_cgra_done_gated[i] = (!io_ctrl_off[i]) ? io_cgra_done_reg[i] : 1;
    end
end

always_comb begin
    // if all controllers are IDLE, then done_pulse is never generated
    if (io_ctrl_off_all == 1) begin
        cgra_done_all = 0;
    end
    else begin
        cgra_done_all = &io_cgra_done_gated;
    end
end

// generate pulse for one cycle
always_ff @(posedge clk) begin
    cgra_done_all_d1 <= cgra_done_all;
end
assign cgra_done_pulse = cgra_done_all & (!cgra_done_all_d1);

//============================================================================//
// address channel interconnection network with pipeline
//============================================================================//
reg [GLB_ADDR_WIDTH-1:0]    bank_addr_int [31:0];
always_comb begin
    for (integer j=0; j<8; j=j+1) begin
        for (integer k=0; k<4; k=k+1) begin
            if (j==0 && k==0) begin
                bank_addr_int[0] = io_ctrl_switch_sel[0][0] ? io_addr[0] : 0;
            end
            else begin
                bank_addr_int[j*4+k] = io_ctrl_switch_sel[j][k] ? io_addr[j] : bank_addr_int[j*4+k-1];
            end
        end
    end
end

//============================================================================//
// write channel interconnection network with pipeline
//============================================================================//
reg                         bank_wr_en_int [31:0];
reg [BANK_DATA_WIDTH-1:0]   bank_wr_data_int [31:0];
reg [BANK_DATA_WIDTH-1:0]   bank_wr_data_bit_sel_int [31:0];

always_comb begin
    for (integer j=0; j<8; j=j+1) begin
        for (integer k=0; k<4; k=k+1) begin
            if (j==0 && k==0) begin
                bank_wr_en_int[0] = io_ctrl_switch_sel[0][0] ? io_wr_en[0] : 0;
            end
            else begin
                bank_wr_en_int[j*4+k] = io_ctrl_switch_sel[j][k] ? io_wr_en[j] : bank_wr_en_int[j*4+k-1];
            end
        end
    end
end

always_comb begin
    for (integer j=0; j<8; j=j+1) begin
        for (integer k=0; k<4; k=k+1) begin
            if (j==0 && k==0) begin
                bank_wr_data_int[0] = io_ctrl_switch_sel[0][0] ? io_wr_data[0] : 0;
            end
            else begin
                bank_wr_data_int[j*4+k] = io_ctrl_switch_sel[j][k] ? io_wr_data[j] : bank_wr_data_int[j*4+k-1];
            end
        end
    end
end

always_comb begin
    for (integer j=0; j<8; j=j+1) begin
        for (integer k=0; k<4; k=k+1) begin
            if (j==0 && k==0) begin
                bank_wr_data_bit_sel_int[0] = io_ctrl_switch_sel[0][0] ? io_wr_data_bit_sel[0] : 0; 
            end
            else begin
                bank_wr_data_bit_sel_int[j*4+k] = io_ctrl_switch_sel[j][k] ? io_wr_data_bit_sel[j] : bank_wr_data_bit_sel_int[j*4+k-1]; 
            end
        end
    end
end

//============================================================================//
// read channel interconnection network with pipeline
//============================================================================//
reg                         bank_rd_en_int [31:0];
reg                         io_to_bank_rd_en_int_d1 [31:0];
reg                         io_to_bank_rd_en_int_d2 [31:0];
reg [BANK_DATA_WIDTH-1:0]   io_rd_data_int [7:0];
reg [BANK_DATA_WIDTH-1:0]   bank_rd_data_int [31:0];
reg [BANK_DATA_WIDTH-1:0]   bank_to_io_rd_data_d1 [31:0];

always_comb begin
    for (integer j=0; j<8; j=j+1) begin
        for (integer k=0; k<4; k=k+1) begin
            if (j==0 && k==0) begin
                bank_rd_en_int[0] = io_ctrl_switch_sel[0][0] ? io_rd_en[0] : 0; 
            end
            else begin
                bank_rd_en_int[j*4+k] = io_ctrl_switch_sel[j][k] ? io_rd_en[j] : bank_rd_en_int[j*4+k-1];
            end
        end
    end
end

always_ff @(posedge clk) begin
    if (clk_en) begin
        for (integer i=0; i<32; i=i+1) begin
            io_to_bank_rd_en_int_d1[i] <= io_to_bank_rd_en[i];
            io_to_bank_rd_en_int_d2[i] <= io_to_bank_rd_en_int_d1[i];
        end
    end
end

always_ff @(posedge clk) begin
    if (clk_en) begin
        for (integer i=0; i<32; i=i+1) begin
            bank_to_io_rd_data_d1[i] <= bank_to_io_rd_data[i]; 
        end
    end
end

always_comb begin
    for (integer k=31; k>=0; k=k-1) begin
        if (k == 31) begin
            bank_rd_data_int[31] = io_to_bank_rd_en_int_d2[31] ? bank_to_io_rd_data_d1[31] : 0;
        end
        else begin
            bank_rd_data_int[k] = io_to_bank_rd_en_int_d2[k] ? bank_to_io_rd_data_d1[k] : bank_rd_data_int[k+1];
        end
    end
end

always_comb begin
    for (integer j=0; j<8; j=j+1) begin
        if (io_ctrl_switch_sel[j][0] == 1'b1)
            io_rd_data_int[j] = bank_rd_data_int[j*4];
        else if (io_ctrl_switch_sel[j][1] == 1'b1)
            io_rd_data_int[j] = bank_rd_data_int[j*4+1];
        else if (io_ctrl_switch_sel[j][2] == 1'b1)
            io_rd_data_int[j] = bank_rd_data_int[j*4+2];
        else if (io_ctrl_switch_sel[j][3] == 1'b1)
            io_rd_data_int[j] = bank_rd_data_int[j*4+3];
        else
            io_rd_data_int[j] = 0;
    end
end

assign io_rd_data = io_rd_data_int;

//============================================================================//
// rd_data_valid channel interconnection network with pipeline
//============================================================================//
logic bank_to_io_rd_data_valid [31:0];
logic bank_rd_data_valid_int [31:0];
logic io_rd_data_valid_int [7:0];

// if bank_rd_en is high, rd_data_valid goes high after 2 cycle latency
assign bank_to_io_rd_data_valid = io_to_bank_rd_en_int_d2;

always_comb begin
    for (integer k=31; k>=0; k=k-1) begin
        if (k == 31) begin
            bank_rd_data_valid_int[31] = io_to_bank_rd_en_int_d2[31] ? bank_to_io_rd_data_valid[31] : 0;
        end
        else begin
            bank_rd_data_valid_int[k] = io_to_bank_rd_en_int_d2[k] ? bank_to_io_rd_data_valid[k] : bank_rd_data_valid_int[k+1];
        end
    end
end

always_comb begin
    for (integer j=0; j<8; j=j+1) begin
        if (io_ctrl_switch_sel[j][0] == 1'b1) begin
            io_rd_data_valid_int[j] = bank_rd_data_valid_int[j*4];
        end
        else if (io_ctrl_switch_sel[j][1] == 1'b1) begin
            io_rd_data_valid_int[j] = bank_rd_data_valid_int[j*4+1];
        end
        else if (io_ctrl_switch_sel[j][2] == 1'b1) begin
            io_rd_data_valid_int[j] = bank_rd_data_valid_int[j*4+2];
        end
        else if (io_ctrl_switch_sel[j][3] == 1'b1) begin
            io_rd_data_valid_int[j] = bank_rd_data_valid_int[j*4+3];
        end
        else begin
            io_rd_data_valid_int[j] = 0;
        end
    end
end

assign io_rd_data_valid = io_rd_data_valid_int;

//============================================================================//
// output assignment
//============================================================================//
always_comb begin
    for (integer k=0; k<32; k=k+1) begin
        io_to_bank_wr_en[k] = bank_wr_en_int[k] && (bank_addr_int[k][GLB_ADDR_WIDTH-1:BANK_ADDR_WIDTH] == k);
    end
end

always_comb begin
    for (integer k=0; k<32; k=k+1) begin
        io_to_bank_rd_en[k] = bank_rd_en_int[k] && (bank_addr_int[k][GLB_ADDR_WIDTH-1:BANK_ADDR_WIDTH] == k);
    end
end

assign io_to_bank_wr_data = bank_wr_data_int;
assign io_to_bank_wr_data_bit_sel = bank_wr_data_bit_sel_int;

always_comb begin
    for (integer k=0; k<32; k=k+1) begin
        io_to_bank_wr_addr[k] = bank_addr_int[k][BANK_ADDR_WIDTH-1:0];
        io_to_bank_rd_addr[k] = bank_addr_int[k][BANK_ADDR_WIDTH-1:0];
    end
end

endmodule
