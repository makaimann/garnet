//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11879 $ --- $Date: 2013/06/11 $   |
//	-----------------------------------------------
//	
//
//  Source file: /nobackupkiwi/kongty/AHA/garnet/global_buffer/genesis/global_buffer.svp
//  Source template: global_buffer
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

//============================================================================//
// generator parameter declaration
//============================================================================//
// num_banks (_GENESIS2_DECLARATION_PRIORITY_) = 32
//
// num_io_channels (_GENESIS2_DECLARATION_PRIORITY_) = 8
//
// num_cfg_channels (_GENESIS2_DECLARATION_PRIORITY_) = 8
//
// bank_addr_width (_GENESIS2_DECLARATION_PRIORITY_) = 17
//
// bank_data_width (_GENESIS2_DECLARATION_PRIORITY_) = 64
//
// glb_config_tile_width (_GENESIS2_DECLARATION_PRIORITY_) = 2
//
// glb_config_feature_width (_GENESIS2_DECLARATION_PRIORITY_) = 4
//
// glb_config_reg_width (_GENESIS2_DECLARATION_PRIORITY_) = 4
//
// config_data_width (_GENESIS2_DECLARATION_PRIORITY_) = 32
//
// config_addr_width (_GENESIS2_DECLARATION_PRIORITY_) = 32
//
// axi_addr_width (_GENESIS2_DECLARATION_PRIORITY_) = 12
//
// cgra_data_width (_GENESIS2_DECLARATION_PRIORITY_) = 16
//
// glb_addr_width (_GENESIS2_DECLARATION_PRIORITY_) = 32
//

module global_buffer (
    input                                               clk,
    input                                               reset,

    input  [7:0]              host_wr_strb,
    input  [63:0]                     host_wr_data,
    input  [31:0]                      host_wr_addr,

    input                                               host_rd_en,
    output [63:0]                     host_rd_data,
    input  [31:0]                      host_rd_addr,

    //input  [7:0]                     cgra_to_io_stall,
    input  [7:0]                     cgra_to_io_wr_en,
    input  [7:0]                     cgra_to_io_rd_en,
    output [7:0]                     io_to_cgra_rd_data_valid,
    input  [127:0]    cgra_to_io_wr_data,
    output [127:0]    io_to_cgra_rd_data,
    input  [127:0]    cgra_to_io_addr_high,
    input  [127:0]    cgra_to_io_addr_low,

    output [7:0]                    glb_to_cgra_cfg_wr,
    output [7:0]                    glb_to_cgra_cfg_rd,
    output [255:0] glb_to_cgra_cfg_addr,
    output [255:0] glb_to_cgra_cfg_data,

    input                                               glc_to_io_stall,
    input                                               glc_to_cgra_cfg_wr,
    input                                               glc_to_cgra_cfg_rd,
    input  [31:0]                   glc_to_cgra_cfg_addr,
    input  [31:0]                   glc_to_cgra_cfg_data,

    input                                               cgra_start_pulse,
    output                                              cgra_done_pulse,
    input                                               config_start_pulse,
    output                                              config_done_pulse,

    input                                               glb_config_wr,
    input                                               glb_config_rd,
    input  [11:0]                      glb_config_addr,
    input  [31:0]                   glb_config_wr_data,
    output [31:0]                   glb_config_rd_data,

    input                                               glb_sram_config_wr,
    input                                               glb_sram_config_rd,
    input  [31:0]                   glb_sram_config_addr,
    input  [31:0]                   glb_sram_config_wr_data,
    output [31:0]                   glb_sram_config_rd_data
);

//============================================================================//
// signal connection
//============================================================================//
//wire                          int_cgra_to_io_stall [7:0];
wire                          int_cgra_to_io_wr_en [7:0];
wire                          int_cgra_to_io_rd_en [7:0];
wire                          int_io_to_cgra_rd_data_valid [7:0];
wire [15:0] int_cgra_to_io_wr_data[7:0];
wire [15:0] int_io_to_cgra_rd_data[7:0];
wire [15:0] int_cgra_to_io_addr_high[7:0];
wire [15:0] int_cgra_to_io_addr_low[7:0];

//assign int_cgra_to_io_stall[0] = cgra_to_io_stall[0];
assign int_cgra_to_io_wr_en[0] = cgra_to_io_wr_en[0];
assign int_cgra_to_io_rd_en[0] = cgra_to_io_rd_en[0];
assign io_to_cgra_rd_data_valid[0] = int_io_to_cgra_rd_data_valid[0];
assign int_cgra_to_io_wr_data[0] = cgra_to_io_wr_data[0 +: 16];
assign io_to_cgra_rd_data[0 +: 16] = int_io_to_cgra_rd_data[0];
assign int_cgra_to_io_addr_high[0] = cgra_to_io_addr_high[0 +: 16];
assign int_cgra_to_io_addr_low[0] = cgra_to_io_addr_low[0 +: 16];
//assign int_cgra_to_io_stall[1] = cgra_to_io_stall[1];
assign int_cgra_to_io_wr_en[1] = cgra_to_io_wr_en[1];
assign int_cgra_to_io_rd_en[1] = cgra_to_io_rd_en[1];
assign io_to_cgra_rd_data_valid[1] = int_io_to_cgra_rd_data_valid[1];
assign int_cgra_to_io_wr_data[1] = cgra_to_io_wr_data[16 +: 16];
assign io_to_cgra_rd_data[16 +: 16] = int_io_to_cgra_rd_data[1];
assign int_cgra_to_io_addr_high[1] = cgra_to_io_addr_high[16 +: 16];
assign int_cgra_to_io_addr_low[1] = cgra_to_io_addr_low[16 +: 16];
//assign int_cgra_to_io_stall[2] = cgra_to_io_stall[2];
assign int_cgra_to_io_wr_en[2] = cgra_to_io_wr_en[2];
assign int_cgra_to_io_rd_en[2] = cgra_to_io_rd_en[2];
assign io_to_cgra_rd_data_valid[2] = int_io_to_cgra_rd_data_valid[2];
assign int_cgra_to_io_wr_data[2] = cgra_to_io_wr_data[32 +: 16];
assign io_to_cgra_rd_data[32 +: 16] = int_io_to_cgra_rd_data[2];
assign int_cgra_to_io_addr_high[2] = cgra_to_io_addr_high[32 +: 16];
assign int_cgra_to_io_addr_low[2] = cgra_to_io_addr_low[32 +: 16];
//assign int_cgra_to_io_stall[3] = cgra_to_io_stall[3];
assign int_cgra_to_io_wr_en[3] = cgra_to_io_wr_en[3];
assign int_cgra_to_io_rd_en[3] = cgra_to_io_rd_en[3];
assign io_to_cgra_rd_data_valid[3] = int_io_to_cgra_rd_data_valid[3];
assign int_cgra_to_io_wr_data[3] = cgra_to_io_wr_data[48 +: 16];
assign io_to_cgra_rd_data[48 +: 16] = int_io_to_cgra_rd_data[3];
assign int_cgra_to_io_addr_high[3] = cgra_to_io_addr_high[48 +: 16];
assign int_cgra_to_io_addr_low[3] = cgra_to_io_addr_low[48 +: 16];
//assign int_cgra_to_io_stall[4] = cgra_to_io_stall[4];
assign int_cgra_to_io_wr_en[4] = cgra_to_io_wr_en[4];
assign int_cgra_to_io_rd_en[4] = cgra_to_io_rd_en[4];
assign io_to_cgra_rd_data_valid[4] = int_io_to_cgra_rd_data_valid[4];
assign int_cgra_to_io_wr_data[4] = cgra_to_io_wr_data[64 +: 16];
assign io_to_cgra_rd_data[64 +: 16] = int_io_to_cgra_rd_data[4];
assign int_cgra_to_io_addr_high[4] = cgra_to_io_addr_high[64 +: 16];
assign int_cgra_to_io_addr_low[4] = cgra_to_io_addr_low[64 +: 16];
//assign int_cgra_to_io_stall[5] = cgra_to_io_stall[5];
assign int_cgra_to_io_wr_en[5] = cgra_to_io_wr_en[5];
assign int_cgra_to_io_rd_en[5] = cgra_to_io_rd_en[5];
assign io_to_cgra_rd_data_valid[5] = int_io_to_cgra_rd_data_valid[5];
assign int_cgra_to_io_wr_data[5] = cgra_to_io_wr_data[80 +: 16];
assign io_to_cgra_rd_data[80 +: 16] = int_io_to_cgra_rd_data[5];
assign int_cgra_to_io_addr_high[5] = cgra_to_io_addr_high[80 +: 16];
assign int_cgra_to_io_addr_low[5] = cgra_to_io_addr_low[80 +: 16];
//assign int_cgra_to_io_stall[6] = cgra_to_io_stall[6];
assign int_cgra_to_io_wr_en[6] = cgra_to_io_wr_en[6];
assign int_cgra_to_io_rd_en[6] = cgra_to_io_rd_en[6];
assign io_to_cgra_rd_data_valid[6] = int_io_to_cgra_rd_data_valid[6];
assign int_cgra_to_io_wr_data[6] = cgra_to_io_wr_data[96 +: 16];
assign io_to_cgra_rd_data[96 +: 16] = int_io_to_cgra_rd_data[6];
assign int_cgra_to_io_addr_high[6] = cgra_to_io_addr_high[96 +: 16];
assign int_cgra_to_io_addr_low[6] = cgra_to_io_addr_low[96 +: 16];
//assign int_cgra_to_io_stall[7] = cgra_to_io_stall[7];
assign int_cgra_to_io_wr_en[7] = cgra_to_io_wr_en[7];
assign int_cgra_to_io_rd_en[7] = cgra_to_io_rd_en[7];
assign io_to_cgra_rd_data_valid[7] = int_io_to_cgra_rd_data_valid[7];
assign int_cgra_to_io_wr_data[7] = cgra_to_io_wr_data[112 +: 16];
assign io_to_cgra_rd_data[112 +: 16] = int_io_to_cgra_rd_data[7];
assign int_cgra_to_io_addr_high[7] = cgra_to_io_addr_high[112 +: 16];
assign int_cgra_to_io_addr_low[7] = cgra_to_io_addr_low[112 +: 16];

wire                            int_glb_to_cgra_cfg_wr [7:0];
wire                            int_glb_to_cgra_cfg_rd [7:0];
wire [31:0] int_glb_to_cgra_cfg_addr [7:0];
wire [31:0] int_glb_to_cgra_cfg_data [7:0];

assign glb_to_cgra_cfg_wr[0] = int_glb_to_cgra_cfg_wr[0];
assign glb_to_cgra_cfg_rd[0] = int_glb_to_cgra_cfg_rd[0];
assign glb_to_cgra_cfg_addr[0 +: 32] = int_glb_to_cgra_cfg_addr[0];
assign glb_to_cgra_cfg_data[0 +: 32] = int_glb_to_cgra_cfg_data[0];
assign glb_to_cgra_cfg_wr[1] = int_glb_to_cgra_cfg_wr[1];
assign glb_to_cgra_cfg_rd[1] = int_glb_to_cgra_cfg_rd[1];
assign glb_to_cgra_cfg_addr[32 +: 32] = int_glb_to_cgra_cfg_addr[1];
assign glb_to_cgra_cfg_data[32 +: 32] = int_glb_to_cgra_cfg_data[1];
assign glb_to_cgra_cfg_wr[2] = int_glb_to_cgra_cfg_wr[2];
assign glb_to_cgra_cfg_rd[2] = int_glb_to_cgra_cfg_rd[2];
assign glb_to_cgra_cfg_addr[64 +: 32] = int_glb_to_cgra_cfg_addr[2];
assign glb_to_cgra_cfg_data[64 +: 32] = int_glb_to_cgra_cfg_data[2];
assign glb_to_cgra_cfg_wr[3] = int_glb_to_cgra_cfg_wr[3];
assign glb_to_cgra_cfg_rd[3] = int_glb_to_cgra_cfg_rd[3];
assign glb_to_cgra_cfg_addr[96 +: 32] = int_glb_to_cgra_cfg_addr[3];
assign glb_to_cgra_cfg_data[96 +: 32] = int_glb_to_cgra_cfg_data[3];
assign glb_to_cgra_cfg_wr[4] = int_glb_to_cgra_cfg_wr[4];
assign glb_to_cgra_cfg_rd[4] = int_glb_to_cgra_cfg_rd[4];
assign glb_to_cgra_cfg_addr[128 +: 32] = int_glb_to_cgra_cfg_addr[4];
assign glb_to_cgra_cfg_data[128 +: 32] = int_glb_to_cgra_cfg_data[4];
assign glb_to_cgra_cfg_wr[5] = int_glb_to_cgra_cfg_wr[5];
assign glb_to_cgra_cfg_rd[5] = int_glb_to_cgra_cfg_rd[5];
assign glb_to_cgra_cfg_addr[160 +: 32] = int_glb_to_cgra_cfg_addr[5];
assign glb_to_cgra_cfg_data[160 +: 32] = int_glb_to_cgra_cfg_data[5];
assign glb_to_cgra_cfg_wr[6] = int_glb_to_cgra_cfg_wr[6];
assign glb_to_cgra_cfg_rd[6] = int_glb_to_cgra_cfg_rd[6];
assign glb_to_cgra_cfg_addr[192 +: 32] = int_glb_to_cgra_cfg_addr[6];
assign glb_to_cgra_cfg_data[192 +: 32] = int_glb_to_cgra_cfg_data[6];
assign glb_to_cgra_cfg_wr[7] = int_glb_to_cgra_cfg_wr[7];
assign glb_to_cgra_cfg_rd[7] = int_glb_to_cgra_cfg_rd[7];
assign glb_to_cgra_cfg_addr[224 +: 32] = int_glb_to_cgra_cfg_addr[7];
assign glb_to_cgra_cfg_data[224 +: 32] = int_glb_to_cgra_cfg_data[7];

global_buffer_int #(
    .BANK_DATA_WIDTH(64),
    .CGRA_DATA_WIDTH(16),
    .GLB_CFG_ADDR_WIDTH(12),
    .GLB_CFG_TILE_WIDTH(2),
    .GLB_CFG_FEATURE_WIDTH(4),
    .GLB_CFG_REG_WIDTH(4),
    .CFG_ADDR_WIDTH(32),
    .CFG_DATA_WIDTH(32),
    .GLB_ADDR_WIDTH(32)
) global_buffer_int
(
    .clk(clk),
    .reset(reset),

    .host_wr_strb(host_wr_strb),
    .host_wr_data(host_wr_data),
    .host_wr_addr(host_wr_addr),

    .host_rd_en(host_rd_en),
    .host_rd_data(host_rd_data),
    .host_rd_addr(host_rd_addr),

    //.cgra_to_io_stall(int_cgra_to_io_stall),
    .cgra_to_io_wr_en(int_cgra_to_io_wr_en),
    .cgra_to_io_rd_en(int_cgra_to_io_rd_en),
    .io_to_cgra_rd_data_valid(int_io_to_cgra_rd_data_valid),
    .cgra_to_io_wr_data(int_cgra_to_io_wr_data),
    .io_to_cgra_rd_data(int_io_to_cgra_rd_data),
    .cgra_to_io_addr_high(int_cgra_to_io_addr_high),
    .cgra_to_io_addr_low(int_cgra_to_io_addr_low),

    .glb_to_cgra_cfg_wr(int_glb_to_cgra_cfg_wr),
    .glb_to_cgra_cfg_rd(int_glb_to_cgra_cfg_rd),
    .glb_to_cgra_cfg_addr(int_glb_to_cgra_cfg_addr),
    .glb_to_cgra_cfg_data(int_glb_to_cgra_cfg_data),

    .glc_to_io_stall(glc_to_io_stall),
    .glc_to_cgra_cfg_wr(glc_to_cgra_cfg_wr),
    .glc_to_cgra_cfg_rd(glc_to_cgra_cfg_rd),
    .glc_to_cgra_cfg_addr(glc_to_cgra_cfg_addr),
    .glc_to_cgra_cfg_data(glc_to_cgra_cfg_data),

    .cgra_start_pulse(cgra_start_pulse),
    .cgra_done_pulse(cgra_done_pulse),
    .config_start_pulse(config_start_pulse),
    .config_done_pulse(config_done_pulse),
    
    .glb_config_wr(glb_config_wr),
    .glb_config_rd(glb_config_rd),
    .glb_config_addr(glb_config_addr),
    .glb_config_wr_data(glb_config_wr_data),
    .glb_config_rd_data(glb_config_rd_data),

    .glb_sram_config_wr(glb_sram_config_wr),
    .glb_sram_config_rd(glb_sram_config_rd),
    .glb_sram_config_addr(glb_sram_config_addr),
    .glb_sram_config_wr_data(glb_sram_config_wr_data),
    .glb_sram_config_rd_data(glb_sram_config_rd_data)
);

endmodule
